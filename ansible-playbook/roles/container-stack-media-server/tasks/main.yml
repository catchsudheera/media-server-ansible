---
- name: Create stack root directory
  file:
    path: "{{ media_server_container_stack_location }}"
    state: directory
    owner: "{{ server_data_dir_user }}"
    group: "{{ server_data_dir_group }}"

- name: Create qbittorrent directories
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ server_data_dir_user }}"
    group: "{{ server_data_dir_group }}"
  loop:
    - "{{ qbittorrent_download_path }}"
    - "{{ qbittorrent_config_path }}"
  when: qbittorrent_enable|bool == true

- name: Install 7z to unpack rar files
  apt:
    name: [p7zip-full, p7zip]
    update_cache: yes

- name: Install vpn type NordLynx
  block:
    - name: Install dependencies
      apt:
        name: wireguard
    - name: Generate the private key
      script:
        cmd: "vpn-nordlynx-private-key-generate.sh {{ vpn_token }}"
      register: nordlynx_private_key
  when: add_vpn_container|bool == true and vpn_type == 'nordlynx'

- name: Copy Docker compose template
  template:
    src: docker-compose.yml.j2
    dest: "{{ media_server_container_stack_location }}/docker-compose.yml"
    owner: "{{ server_data_dir_user }}"
    group: "{{ server_data_dir_group }}"

- name: Copy environment variable file
  template:
    src: .env.j2
    dest: "{{ media_server_container_stack_location }}/.env"
    owner: "{{ server_data_dir_user }}"
    group: "{{ server_data_dir_group }}"
  when: add_vpn_container|bool == true and vpn_type == 'openvpn'

- name: Install Transmission
  block:
    - name: Create transmission directories
      file:
        path: "{{ item }}"
        state: directory
        owner: "{{ server_data_dir_user }}"
        group: "{{ server_data_dir_group }}"
      loop:
        - "{{ transmission_download_path }}"
        - "{{ transmission_config_path }}"
        - "{{ transmission_additional_config_path }}"
        - "{{ transmission_additional_config_path }}/scripts"

    - name: Copy transmission settings file
      template:
        src: settings.json.j2
        dest: "{{ transmission_config_path }}/settings.json"
        owner: "{{ server_data_dir_user }}"
        group: "{{ server_data_dir_group }}"

    - name: Copy transmission post download script file
      copy:
        src: post-torrent-download.sh
        dest: "{{ transmission_additional_config_path }}/scripts/post-torrent-download.sh"
        owner: "{{ server_data_dir_user }}"
        group: "{{ server_data_dir_group }}"
        mode: '0755'
  when: transmission_enable|bool == true

- name: Create container directories
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ server_data_dir_user }}"
    group: "{{ server_data_dir_group }}"
  loop:
    - "{{ sonarr_config_path_local }}"
    - "{{ sonarr_config_path_nfs }}"
    - "{{ sonarr_library_path }}"
    - "{{ sonarr_download_path }}"
    - "{{ radarr_config_path_local }}"
    - "{{ radarr_config_path_nfs }}"
    - "{{ radarr_library_path }}"
    - "{{ radarr_download_path }}"
    - "{{ jackett_config_path }}"
    - "{{ jackett_torrent_file_path }}"
    - "{{ jackett_config_path }}/Jackett"

- set_fact:
    sonarr_api_key: "{{ lookup('password', 'api-keys-temp/sonarr chars=ascii_lowercase,digits length=32') }}"
    radarr_api_key: "{{ lookup('password', 'api-keys-temp/radarr chars=ascii_lowercase,digits length=32') }}"
    jackett_instance_id: "{{ lookup('password', 'api-keys-temp/jackett chars=ascii_lowercase,digits length=64') }}"

- name: Copy Sonarr, Radarr config files
  template:
    src: "{{ item.name }}-config.xml.j2"
    dest: "{{ item.configPath }}/config.xml"
  loop:
    - { name: 'sonarr', configPath: "{{ sonarr_config_path_local }}" }
    - { name: 'radarr', configPath: "{{ radarr_config_path_local }}" }

- name: Copy Jackett config file
  template:
    src: jackett-config.json.j2
    dest: "{{ jackett_config_path }}/Jackett/ServerConfig.json"

#    Reason for the following step is to workaround the SQLite WAL file locking issue with NFS mounts
#    We effectively use a local dir to drive the config and periodically copies it to NFS mount
- name: Initial Copy of the Sonarr config from NFS to local
  copy:
    src: "{{ sonarr_config_path_nfs }}/"
    dest: "{{ sonarr_config_path_local }}/"
    remote_src: true
    owner: "{{ server_data_dir_user }}"
    group: "{{ server_data_dir_group }}"

- name: Initial Copy of the Radarr config from NFS to local
  copy:
    src: "{{ radarr_config_path_nfs }}/"
    dest: "{{ radarr_config_path_local }}/"
    remote_src: true
    owner: "{{ server_data_dir_user }}"
    group: "{{ server_data_dir_group }}"

- name: Setup rsync tasks for Sonarr config backup
  ansible.builtin.cron:
    name: "Sonarr config backup"
    special_time: "hourly"
    job: "rsync -a -W --delete {{ sonarr_config_path_local }}/ {{ sonarr_config_path_nfs }}/"
    user: "{{ server_data_dir_user }}"

- name: Setup rsync tasks for Radarr config backup
  ansible.builtin.cron:
    name: "Radarr config backup"
    special_time: "hourly"
    job: "rsync -a -W --delete {{ radarr_config_path_local }}/ {{ radarr_config_path_nfs }}/"
    user: "{{ server_data_dir_user }}"

- name: Start Docker containers using docker-compose
  community.docker.docker_compose:
    project_src: "{{ media_server_container_stack_location }}"
  tags: start-stacks

- name: Adding the Systemd units for docker-compose management
  import_role:
    name: docker-compose-systemd
  vars:
    docker_compose_dir_path: "{{ media_server_container_stack_location }}"
    stack_name: container-stack-media-server
  tags: version_1.0.1

- name: Stop Docker containers if running
  block:
    - name: Check wether the docker file exist
      stat:
        path: "{{ media_server_container_stack_location }}/docker-compose.yml"
      register: media_server_container_stack_location_docker_compose_file

    - name: Check validity of compose file
      shell: "docker-compose -f {{ media_server_container_stack_location }}/docker-compose.yml config"
      register: media_server_container_stack_docker_compose_file_validate
      ignore_errors: yes

    - name: Stopping using docker compose
      community.docker.docker_compose:
        project_src: "{{ media_server_container_stack_location }}"
        state: absent
      when: media_server_container_stack_location_docker_compose_file.stat.exists and media_server_container_stack_docker_compose_file_validate.failed|bool != true
  tags: [ 'never', 'stop-stacks' ]


